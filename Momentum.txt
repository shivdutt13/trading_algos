/*
 * IDEA: 
 * 
 * The Moving Average Convergence Divergence (MACD) is an excellent indicator
 * in that it combines both trend and momentum. To make the MACD more sensitive,
 * we should use a shorter short term EMA and a longer long term EMA in its
 * calculation (the standard convention is to use 12 day and 26 day EMA).
 * 
 * If the MACD moves in a particular direction for >= M days, we take this to 
 * be a buy signal. The moment it changes direction, we sell the next day. 
 * 
 * We analyze the profits using this method. 
 * 
 * EQUATIONS:
 *  
 * An explanation can be found at: http://www.iexplain.org/ema-how-to-calculate/
 * The value k = 2/(N+1), where N is the number of days in the EMA. 
 * EMA  = Price(today) * k + EMA(yesterday) * (1-k).
 * MACD = EMA(12) - EMA(26) (by convention, it is short term - long term)
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Momentum {

	static Double totalProfit = 0.0; // keep track of total profit
	static int totalTransactions = 0; // keep track of total transactions

	public static void main(String[] args) throws FileNotFoundException {

		/*
		 * STEP 1. READ IN DATA POINTS INTO AN ARRAY Total number of data points
		 * = N.
		 */

		// create the file scanner
		Scanner scanner = new Scanner(new File(
				"C:\\Users\\Shiv\\Desktop\\Poshak Hedge Fund\\IBM_Data.txt"));

		// Read in header information
		scanner.nextLine();

		int lineNumber = 0; // to keep track of which line is being read in - 0
							// is header

		List<Double> prices = new ArrayList<Double>(); // list of closing prices

		// Read in file
		while (scanner.hasNextLine()) {
			lineNumber++;
			// System.out.println("Line number is: " + lineNumber);
			String line = scanner.nextLine(); // read line
			StringTokenizer st = new StringTokenizer(line); // split into
															// Strings by spaces
			st.nextToken(); // First token
			st.nextToken(); // Second token
			
			st.nextToken();
			st.nextToken();
			st.nextToken();
			st.nextToken(); // 6th token
			String priceString = st.nextToken(); // Closing price is 7th column
													// or token
			
			Double price = Double.parseDouble(priceString); // convert price to
			// Double (not
			// double)
			prices.add(price); // add price to list			
		}
		  
		System.out.println("Size of list is: " + prices.size()); // list size
		
				// Call function which prints out results for particular stock
				calculateMomentumResults((Double[]) prices
						.toArray(new Double[prices.size()])); // convert list to
																// array

	}

	// Method to get Momentum Results for a particular stock
	public static void calculateMomentumResults(Double[] array) {

		int N = array.length; // number of data points
		System.out.println("Array's size is: " + N);
		int currentTransactions = 0;

		// Reversing the array
		for (int q = 0; q < (array.length) / 2; q++) {
			Double temp = array[q];
			array[q] = array[array.length - q - 1];
			array[array.length - q - 1] = temp;
		}

		// Calculating average price
		Double averagePrice = 0.0;
		for (int p = 0; p < N; p++) {
			averagePrice += array[p];
		}
		averagePrice /= N;
		System.out.println("The average stock price is: " + averagePrice);

		// STEP 2. CALCULATE ARRAY FOR N1 day EMA (the longer value). Here N1 =
		// 20.
		int N1 = 20;
		Double[] EMA_N1 = new Double[N];
		Double k_N1 = 2.0 / (N1 + 1); // hard bug to find - had to have 2.0
		//System.out.println("k_20 is: " + k_N1);

		Double averageFirstN1 = 0.0;
		for (int j = 0; j < N1; j++) {
			averageFirstN1 += array[j];
		}
		averageFirstN1 /= N1;
		//System.out.println("The 20 average is: " + averageFirstN1);

		EMA_N1[N1] = averageFirstN1 * (1 - k_N1) + array[N1] * k_N1;
		//System.out.println("The First EMA_20 entry is: " + EMA_N1[N1]);

		for (int m = N1 + 1; m < N; m++) {
			EMA_N1[m] = array[m] * k_N1 + EMA_N1[m - 1] * (1 - k_N1);
		}


		// STEP 3. CALCULATE ARRAY FOR N2 day EMA (the shorter value). Here N2 =
		// 12.
		int N2 = 16;
		Double[] EMA_N2 = new Double[N];
		Double k_N2 = 2.0 / (N2 + 1);
		Double averageFirstN2 = 0.0;
		for (int j = 0; j < N2; j++) {
			averageFirstN2 += array[j];
		}
		averageFirstN2 /= N2;
		//System.out.println("The 16 average is: " + averageFirstN2);

		EMA_N2[N2] = averageFirstN2 * (1 - k_N2) + array[N2] * k_N2;
		//System.out.println("The first 16 EMA entry is: " + EMA_N2[N2]);

		for (int m = N2 + 1; m < N; m++) {
			EMA_N2[m] = array[m] * k_N2 + EMA_N2[m - 1] * (1 - k_N2);
		}


		// STEP 4. CALCULATE MACD ARRAY AS EMA(short) - EMA(long)
		Double[] MACD = new Double[N];
		for (int l = N1; l < N; l++) {
			MACD[l] = EMA_N2[l] - EMA_N1[l];
		}

		for (int b = 0; b < N; b++) {
			if (MACD[b] == null) {
				MACD[b] = 0.0;
			}
		}


		// STEP 5. CALCULATE matrix of signs for changes in MACD
		Double[] diff = new Double[N];
		for (int s = N1; s < N - 1; s++) {
			diff[s] = MACD[s + 1] - MACD[s];
		}

		for (int c = 0; c < N; c++) {
			if (diff[c] == null) {
				diff[c] = 0.0;
			}
		}
		

		
		// STEP 6. Calculate sign array
		int[] sign = new int[N];
		for (int t = N1; t < N; t++) {
			sign[t] = (int) Math.signum(diff[t]);
		}
		
		for( int g = 0; g < N; g++)
		{
			System.out.println( sign[g] );
		}

		// STEP 7. Calculate the 6-sum array
		int[] sum = new int[N];
		for (int u = N1 + 4; u < N; u++) {
			sum[u] = sign[u-4] + sign[u-3] + sign[u - 2]
					+ sign[u - 1] + sign[u];
		}


		// STEP 8. Create buy/sell array to keep track of stocks
		Double[] stockCount = new Double[N];

		for (int v = N1; v < N; v++) {
			if (sum[v] == 5) {
				currentTransactions++;
				stockCount[v] = 100.0 / array[v];
			}

			else if (sum[v] == -5) {
				currentTransactions++;
				stockCount[v] = -100.0 / array[v];
			}
		}

		for (int x = 0; x < N; x++) {
			if (stockCount[x] == null) {
				stockCount[x] = 0.0;
			}
		}
		
		
		
		for(int w = N1; w < N; w++){
			Double currentSum = 0.0;
			if(stockCount[w] != 0.0){
				while(stockCount[w] != 0.0){
					System.out.println("");
					currentSum -= stockCount[w];
					w++;
				}
				stockCount[w] = currentSum;
			}
		}
		
		//System.out.println("Printing out sharecount array");
		//for(int g = 0; g < N; g++)
		//{
		//	System.out.println(stockCount[g]);
		//}

		
		// STEP 9: Create PnL array
		Double[] pNL = new Double[N];
		for(int q=0; q < N; q++){
			pNL[q] = stockCount[q]*array[q];
		}
		
		Double profit = 0.0;
		for(int r = 0; r < N; r++){
			profit -= pNL[r];
		}
		
		totalProfit += profit;
		totalTransactions += currentTransactions;
		
		System.out.println("Current Profit is: "+ profit);
		System.out.println();
		
		
		System.out.println("Total profit is: " + totalProfit);
		System.out.println("Total transactions are: " + totalTransactions);
		System.out.println("Profit per transaction is: " + totalProfit/totalTransactions);
		System.out.println();
	}
}
